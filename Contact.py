import logging
import random
import string
import asyncio
from io import BytesIO
from PIL import ImageFilter

from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from PIL import Image, ImageDraw, ImageFont

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "6962799243:AAGich1aEwXGxR9_WQI0gA415wnYhIvSqCs"

# ID –¥–ª—è —Å–≤—è–∑–∏ —Å–æ –º–Ω–æ–π
YOUR_CHAT_ID = "1748805076"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫–∞–ø—á–∏
captcha_passed = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ø—á–∏
def generate_captcha():
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    captcha_text = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–ø—á–∏
    image = Image.new('RGB', (200, 100), color=(255, 255, 255))
    draw = ImageDraw.Draw(image)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞
    font = ImageFont.truetype("arial.ttf", 40)

    # –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∏—Å–∫–∞–∂–µ–Ω–∏—è–º–∏
    draw.text((10, 10), captcha_text, fill=(0, 0, 0), font=font)
    image = image.rotate(random.uniform(-20, 20), expand=1)
    image = image.transform(image.size, Image.AFFINE, (1, -0.1, 0, -0.1, 1, 0), fillcolor=(255, 255, 255))
    image = image.filter(ImageFilter.EDGE_ENHANCE)

    # –°–æ–∑–¥–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    img_buffer = BytesIO()
    image.save(img_buffer, format="PNG")
    img_buffer.seek(0)

    return captcha_text, img_buffer

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class ChatState(StatesGroup):
    waiting_for_message = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if message.from_user.id not in captcha_passed:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–ø—á–∏
        captcha_text, captcha_image = generate_captcha()
        captcha_passed[message.from_user.id] = captcha_text
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
        await message.reply_photo(captcha_image, caption=f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å —Å –∫–∞–ø—á–∏")
    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact_admin"),
                   types.InlineKeyboardButton(text="–¶–µ–Ω—ã", callback_data="prices"))
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda query: query.data == "prices")
async def process_callback_prices(callback_query: types.CallbackQuery):
    # –¢–µ–∫—Å—Ç —Å —Ü–µ–Ω–∞–º–∏
    prices_text = """üåê–ü–∏—à—É –Ω–∞ –∑–∞–∫–∞–∑:

üí£–°–∫—Ä–∏–ø—Ç—ã - –æ—Ç 1000‚ÇΩ
üí£–ë–æ—Ç—ã[TG, DS, VK] - –æ—Ç 1000‚ÇΩ
üí£–ê–≤—Ç–æ—Ä–µ–≥–µ—Ä—ã - –æ—Ç 900‚ÇΩ
üí£–°–∞–π—Ç—ã - –æ—Ç 5000‚ÇΩ
üí£–ß–µ–∫–µ—Ä—ã - –æ—Ç 1000‚ÇΩ

üö®–ü—Ä–æ–¥–∞—é –∞–∫–∫–∞—É–Ω—Ç—ã —Å –º–æ–º–µ–Ω—Ç–∞–ª–∫–æ–π FUNPAY - 5000‚ÇΩ
[36 –æ—Ç–∑—ã–≤–æ–≤ + 22 –≥–æ–¥ —Ä–µ–≥]

üî•–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —á–∞—Ç–∞–º - 2000‚ÇΩ
üî•–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –õ–° - 2500‚ÇΩ
üî•–ê–≤—Ç–æ-–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —á–∞—Ç—ã - 450‚ÇΩ
üî•–ê–≤—Ç–æ—Ä–µ–≥ STEAM - 2500‚ÇΩ
üî•–ê–≤—Ç–æ—Ä–µ–≥ DISCORD - 2000‚ÇΩ
üî•–ê–≤—Ç–æ—Ä–µ–≥ Arizona RP - 700‚ÇΩ
üî•–ê–≤—Ç–æ—Ä–µ–≥ Epic Games - 900‚ÇΩ

üî•–ü—Ä–æ–¥–∞–º —Å–≤–æ–π Ozon –±–∞–Ω–∫ (–ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Ä–∏—Ñ
–ü—Ä–æ–≥—Ä–µ—Ç, –±–æ–ª–µ–µ 100 –æ–ø–µ—Ä–∞—Ü–∏–π)
üî•–ü—Ä–æ–¥–∞–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Ñ–∞–Ω–ø–µ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–µ–º–∏—É–º.

üõí–ü—Ä–∏–Ω–∏–º–∞—é –æ–ø–ª–∞—Ç—É: –ö—Ä–∏–ø—Ç–æ-–≤–∞–ª—é—Ç–æ–π, –°–±–µ—Ä–±–∞–Ω, –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –°–ë–ü, Ozon"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–≤—è–∑—å"
    contact_button = InlineKeyboardButton(text="–°–≤—è–∑—å", url="https://t.me/ExTallentt")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–≤—è–∑—å"
    markup = InlineKeyboardMarkup().add(contact_button)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–°–≤—è–∑—å"
    await bot.send_message(callback_query.from_user.id, prices_text, reply_markup=markup)


from datetime import datetime
from aiogram.types import ForceReply

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º"
@dp.callback_query_handler(lambda query: query.data == "contact_admin")
async def process_callback_contact_admin(callback_query: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ForceReply
    force_reply = ForceReply()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(callback_query.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:", reply_markup=force_reply)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
@dp.callback_query_handler(lambda query: query.data == "reply_to_user")
async def process_callback_reply_to_user(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
    await ChatState.waiting_for_reply.set()

@dp.message_handler(state=ChatState.waiting_for_message)
async def process_reply_to_user(message: types.Message, state: ChatState):
    await bot.send_message(YOUR_CHAT_ID, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç: {message.text}")
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å ForceReply
@dp.message_handler(content_types=ContentType.TEXT, is_reply=True)
async def process_reply_to_admin(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = message.from_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user.id == YOUR_CHAT_ID:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_id = message.reply_to_message.from_user.id
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(YOUR_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} {user.last_name} (ID: {user.id}) –Ω–∞–ø–∏—Å–∞–ª: {message.text}")
        await bot.send_message(user_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    else:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(YOUR_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} {user.last_name} (ID: {user.id}) –Ω–∞–ø–∏—Å–∞–ª: {message.text}")
        await bot.send_message(user.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=ContentType.TEXT)
async def process_text(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–ø—á–∏
    if message.from_user.id in captcha_passed and message.text == captcha_passed[message.from_user.id]:
        del captcha_passed[message.from_user.id]
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin"),
                   types.InlineKeyboardButton(text="–¶–µ–Ω—ã", callback_data="prices"))
        await message.reply("–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫–∞–ø—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
